#include <Trade/Trade.mqh>
CTrade trade;

// === –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
input double TARGET_RR = 3.0;           // –¶–µ–ª–µ–≤–æ–π —Ä–∏—Å–∫/—Ä–µ–≤–∞—Ä–¥
input bool MOVE_TO_BE_ONLY = false;     // TRUE: —Ç–æ–ª—å–∫–æ SL->BE

// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ Global Variables
#define GV_PREFIX "processed_ticket_"

//+------------------------------------------------------------------+
//| OnTick: –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏                                  |
//+------------------------------------------------------------------+
void OnTick()
{
   int total = PositionsTotal();
   for (int i = total - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if (!PositionSelectByTicket(ticket))
         continue;

      if (IsProcessed(ticket))
         continue;

      string symbol  = PositionGetString(POSITION_SYMBOL);
      int type       = (int)PositionGetInteger(POSITION_TYPE);
      double entry   = PositionGetDouble(POSITION_PRICE_OPEN);
      double sl      = PositionGetDouble(POSITION_SL);
      double tp      = PositionGetDouble(POSITION_TP);
      double volume  = PositionGetDouble(POSITION_VOLUME);

      if (type != POSITION_TYPE_BUY && type != POSITION_TYPE_SELL)
         continue;

      double bid, ask;
      if (!SymbolInfoDouble(symbol, SYMBOL_BID, bid) || !SymbolInfoDouble(symbol, SYMBOL_ASK, ask))
         continue;

      double min_lot, lot_step;
      if (!SymbolInfoDouble(symbol, SYMBOL_VOLUME_MIN, min_lot) ||
          !SymbolInfoDouble(symbol, SYMBOL_VOLUME_STEP, lot_step))
         continue;

      double current_rr = 0.0;
      if (!HasReachedTargetRR(type, entry, sl, bid, ask, TARGET_RR, current_rr))
         continue;

      // –ü–µ—Ä–µ–Ω–æ—Å–∏–º SL –≤ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
      if (trade.PositionModify(symbol, entry, tp))
      {
         PrintFormat("‚úÖ %s | Ticket #%d | RR %.2f –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ‚Äî SL –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –Ω–∞ %.5f", symbol, ticket, current_rr, entry);
      }
      else
      {
         PrintFormat("‚ùå %s | Ticket #%d | –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ SL", symbol, ticket);
         continue;
      }

      if (!MOVE_TO_BE_ONLY)
      {
         double fraction = 1.0 / TARGET_RR;
         double volume_to_close = NormalizeLot(volume * fraction, lot_step);

         if (volume_to_close >= min_lot && volume_to_close < volume)
         {
            if (trade.PositionClosePartial(symbol, volume_to_close))
            {
               PrintFormat("üü° %s | Ticket #%d | –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ %.2f –ª–æ—Ç–∞ –∏–∑ %.2f", symbol, ticket, volume_to_close, volume);
            }
            else
            {
               PrintFormat("‚ùå %s | Ticket #%d | –û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è %.2f –ª–æ—Ç–∞", symbol, ticket, volume_to_close);
            }
         }
      }

      AddToProcessed(ticket);
   }
}

//+------------------------------------------------------------------+
//| –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è RR                                           |
//+------------------------------------------------------------------+
bool HasReachedTargetRR(int type, double entry_price, double initial_sl,
                        double bid, double ask, double target_rr,
                        double &out_rr)
{
   double risk = MathAbs(entry_price - initial_sl);
   if (risk < 1e-6)
      return false;

   double reward_now = 0.0;

   if (type == POSITION_TYPE_BUY)
      reward_now = bid - entry_price;
   else if (type == POSITION_TYPE_SELL)
      reward_now = entry_price - ask;

   out_rr = reward_now / risk;
   return out_rr >= target_rr;
}

//+------------------------------------------------------------------+
//| –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ —Ç–∏–∫–µ—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω                             |
//+------------------------------------------------------------------+
bool IsProcessed(ulong ticket)
{
   string gv_name = GV_PREFIX + (string)ticket;
   return GlobalVariableCheck(gv_name);
}

//+------------------------------------------------------------------+
//| –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö                             |
//+------------------------------------------------------------------+
void AddToProcessed(ulong ticket)
{
   string gv_name = GV_PREFIX + (string)ticket;
   GlobalVariableSet(gv_name, TimeCurrent());
}

//+------------------------------------------------------------------+
//| –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –æ–±—ä—ë–º–∞ –∫ —à–∞–≥—É                                         |
//+------------------------------------------------------------------+
double NormalizeLot(double volume, double step)
{
   return MathFloor(volume / step) * step;
}
